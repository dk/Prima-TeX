use strict;
use warnings;

############################################################################
                   package PDL::Graphics::Prima::TeX;
############################################################################
our $VERSION = 0.17;   # do not delete these spaces; run update-version.pl
                       # if you change this

use Carp;
use charnames ':full';

######################################
# Usage        : ????
# Purpose      : ????
# Arguments    : ????
# Returns      : ????
# Side Effects : none
# Throws       : no exceptions
# Comments     : none
# See Also     : n/a

# Assumes rendering if startx and starty are supplied; otherwise just
# computes the length of the rendered string.
my $deg_to_rad = atan2(1, 0) / 90;

sub TeX_out {
	my ($widget, $text, $startx, $starty) = @_;
	my $angle = $widget->font->direction * $deg_to_rad;
	
	my $length = 0;
	my $is_drawing = defined $starty;
	
	while (length ($text) > 0) {
		# If it starts with something that looks like tex...
		if ($text =~ s/^\$([^\$]*\$)//) {
			my $reverse_tex = reverse($1);
			my $dx = measure_or_draw_TeX($widget, $reverse_tex, '$', $startx, $starty);
			$length += $dx;
			if ($is_drawing) {
				$startx += cos($angle) * $dx;
				$starty += sin($angle) * $dx;
			}
		}
		# If a pair of dollar-signs remains, then only pull off up to
		# the dollar-sign
		my $not_tex;
		if (($text =~ tr/$/$/) > 1) {
			$text =~ s/^([^\$]*)//;
			$not_tex = $1;
		}
		else {
			# Pull off non-tex text
			$not_tex = $text;
			$text = '';
		}
		next if length($not_tex) == 0;
		my $dx = $widget->get_text_width($not_tex);
		if ($is_drawing) {
			$widget->text_out($not_tex, $startx, $starty);
			$startx += cos($angle) * $dx;
			$starty += sin($angle) * $dx;
		}
		$length += $dx;
	}
	
	# Always return the final width
	return $length;
}

use charnames qw(:loose);
my @name_for_digit = qw(ZERO ONE TWO THREE FOUR FIVE SIX SEVEN EIGHT NINE);

my %is_unichar = (
	alpha => "SMALL alpha",
	beta => "SMALL beta",
	Gamma => "CAPITAL Gamma",
	gamma => "SMALL gamma",
	Delta => "CAPITAL Delta",
	delta => "SMALL delta",
	epsilon => "SMALL epsilon",
	zeta => "SMALL zeta",
	eta => "SMALL eta",
	Theta => "CAPITAL Theta",
	theta => "SMALL theta",
	vartheta => "THETA SYMBOL",
	iota => "SMALL iota",
	kappa => "SMALL kappa",
	Lambda => "CAPITAL Lambda",
	lambda => "SMALL lambda",
	mu => "SMALL mu",
	nu => "SMALL nu",
	Xi => "CAPITAL Xi",
	xi => "SMALL xi",
	Pi => "CAPITAL Pi",
	pi => "SMALL pi",
	rho => "SMALL rho",
	Sigma => "CAPITAL Sigma",
	sigma => "SMALL sigma",
	varsigma => "SMALL FINAL SIGMA",
	tau => "SMALL tau",
	upsilon => "SMALL upsilon",
	Phi => "CAPITAL Phi",
	phi => "PHI SYMBOL",
	varphi => "SMALL PHI",
	chi => "SMALL chi",
	Psi => "CAPITAL Psi",
	psi => "SMALL psi",
	Omega => "CAPITAL Omega",
	omega => "SMALL omega",
);

my %special_formatting = (
	'+' => "\N{THIN SPACE}+\N{THIN SPACE}",
	'-' => "\N{THIN SPACE}\N{MINUS SIGN}\N{THIN SPACE}",
	'/' => "\N{DIVISION SLASH}",
	',' => ",\N{THIN SPACE}",
	'<' => "\N{THIN SPACE}<\N{THIN SPACE}",
	'>' => "\N{THIN SPACE}>\N{THIN SPACE}",
);

my %is_unisym = (
	to => "\N{THIN SPACE}\N{RIGHTWARDS ARROW}\N{THIN SPACE}",
	times => "\N{MULTIPLICATION SIGN}",
	gt => "\N{THIN SPACE}>\N{THIN SPACE}",
	lt => "\N{THIN SPACE}<\N{THIN SPACE}",
	nabla => "\N{NABLA}",
	partial => "\N{PARTIAL DIFFERENTIAL}",
	ell => "\N{SCRIPT SMALL L}",
	hbar => "\N{PLANCK CONSTANT OVER TWO PI}",
	pm => "\N{THIN SPACE}\N{PLUS-MINUS SIGN}\N{THIN SPACE}",
	sin => "sin",
	cos => "cos",
	tan => "tan",
	',' => "\N{HAIR SPACE}",
);

sub next_char {
	my ($char, undef, $letter_face, $number_face) = @_;
	# ignore spaces
	return '' if $char eq ' ';
	# Capital letters
	return eval "\"\\N{$letter_face CAPITAL $char}\""
		if 'A' le $char and $char le 'Z';
	# lower-case letters
	return eval "\"\\N{$letter_face SMALL $char}\""
		if 'a' le $char and $char le 'z';
	# things with special formatting (like spaces)
	return $special_formatting{$char} if $special_formatting{$char};
	# slash-commands, like \alpha, \hbar, \frac...
	if ($char eq '\\') {
		return '\\' unless $_[1] =~ s/([a-zA-Z]+)$//;
		my $command = reverse $1;
		# greek symbols, which can be serif, bold etc
		return eval "\"\\N{$letter_face $is_unichar{$command}}\""
			if $is_unichar{$command};
		# \hbar, \prime, etc
		return $is_unisym{$command} if $is_unisym{$command};
		# Special handling, like \frac
		if (my $next_render_subref = __PACKAGE__->can("render_$command")) {
			return $next_render_subref;
		}
		# what could be out here? "\\" ?
		return $char;
	}
	# Digits
	return eval "\"\\N{$number_face DIGIT $name_for_digit[$char]}\""
		if '0' le $char and $char le '9';
	# Everything else
	return $char;
}

# Expects TeX argument (offset 1) to be reversed; uses chop for efficiency.
sub measure_or_draw_TeX {
	my ($widget, undef, $end_char, $startx, $starty, $current_face) = @_;
	my $is_drawing = defined $starty;
	my $length = 0;
	my $angle = $widget->font->direction * $deg_to_rad;
	
	my $letter_face = my $number_face = $current_face;
	$letter_face = 'MATHEMATICAL ITALIC' if not defined $letter_face;
	$number_face = '' if not defined $number_face;
	
	# Ignore whitespace
	$_[1] =~ s/ +$//;
	
	# Pull off the first character
	my $char = chop $_[1];
	
	# If no end char given, then we check the first character to see if
	# it's an opening brace.
	if ($end_char eq '') {
		if ($char eq '{') {
			# Assign closing brace as our end char
			$end_char = '}';
			$char = chop $_[1];
		}
		else {
			# No two super/subscripts in a row
			if ($char eq '_' or $char eq '^') {
				my $original = reverse($_[1]);
				croak("Cannot have two superscripts or subscripts in a "
					."row (at $char$original)");
			}
			# We only expect a single "character"
			my $to_render = next_char($char, $_[1], $letter_face, $number_face);
			# If the "character" was a rendering subref, run it
			return $to_render->($widget, $_[1], $startx, $starty, $current_face)
				if ref($to_render);
			# Otherwie, render and/or measure the character
			$widget->text_out($to_render, $startx, $starty) if $is_drawing;
			return $widget->get_text_width($to_render);
		}
	}
	
	my %is_special = map { $_ => 1 } qw(_ ^ { );
	$is_special{$end_char} = 1;
	
	# Parse until we find the end char
	while (length($_[1]) > 0) {
		# Pull out stuff to render directly
		my $to_render = '';
		my $next_render_subref;
		while (length($_[1]) > 0 and !$is_special{$char}) {
			my $next_chunk = next_char($char, $_[1], $letter_face, $number_face);
			if (ref($next_chunk)) {
				$next_render_subref = $next_chunk;
				last;
			}
			# Append to direct rendering unless it's a subref
			$to_render .= $next_chunk;
			$char = chop $_[1];
		}
		
		# Render whatever we have on hand
		if (length($to_render) > 0) {
			my $dx = $widget->get_text_width($to_render);
			if ($is_drawing) {
				$widget->text_out($to_render, $startx, $starty);
				$startx += cos($angle) * $dx;
				$starty += sin($angle) * $dx;
			}
			$length += $dx;
		}
		
		# Call the next rendering subref, if there is one
		if ($next_render_subref) {
			my $dx = $next_render_subref->($widget, $_[1], $startx, $starty, $current_face);
			if ($is_drawing) {
				$startx += cos($angle) * $dx;
				$starty += sin($angle) * $dx;
			}
			$length += $dx;
			$char = chop $_[1];
		}
		
		# What we do next depends on the character that was last popped
		# off in the while loop. If we found the expected end character,
		# we're done
		return $length if $char eq $end_char;
		
		# Handle superscripts and subscripts next. Start by adding just
		# a little bit of space
		if ($char eq '^' or $char eq '_') {
			my $dx = $widget->get_text_width("\N{HAIR SPACE}");
			if ($is_drawing) {
				$startx += cos($angle) * $dx;
				$starty += sin($angle) * $dx;
			}
			$length += $dx;
		}
		my ($sub_length, $super_length);
		while ($char eq '^' or $char eq '_') {
			my $original_font_size = $widget->font->size;
			my $line_height = $widget->font->height;
			$widget->font->size($original_font_size * 2 / 3);
			if ($char eq '^') {
				if (defined $super_length) {
					my $original = reverse($_[1]);
					croak("Cannot have two superscripts or subscripts in a "
						."row (at $char$original)");
				}
				my ($x, $y);
				if ($is_drawing) {
					my $superscript_offset = 0.45 * $line_height;
					$x = $startx - sin($angle) * $superscript_offset;
					$y = $starty + $superscript_offset * cos($angle);
				}
				$super_length = measure_or_draw_TeX($widget, $_[1], '', $x, $y);
			}
			elsif ($char eq '_') {
				if (defined $sub_length) {
					my $original = reverse($_[1]);
					croak("Cannot have two superscripts or subscripts in a "
						."row (at $char$original)");
				}
				my ($x, $y);
				if ($is_drawing) {
					my $subscript_offset = -0.1 * $line_height;
					$x = $startx - sin($angle) * $subscript_offset;
					$y = $starty + $subscript_offset * cos($angle);
				}
				$sub_length = measure_or_draw_TeX($widget, $_[1], '', $x, $y);
			}
			$widget->font->size($original_font_size);
			# Eat whitespace, get the next character
			$_[1] =~ s/^ +//;
			$char = chop $_[1];
		}
		# dx is the longer of the two distances
		$sub_length ||= 0;
		$super_length ||= 0;
		my $dx = $sub_length > $super_length ? $sub_length : $super_length;
		# Update the length and starting positions
		$length += $dx;
		if ($is_drawing) {
			$startx += cos($angle) * $dx;
			$starty += sin($angle) * $dx;
		}
	}
	return $length if $char eq $end_char;
	croak("Encountered unexpected end of tex string");
}

1;
__END__
sub old_TeX_out {
	my ($widget, $text, $startx, $starty) = @_;
	my $angle = $widget->font->direction * $deg_to_rad;
	
	my $length = 0;
	my $is_drawing = defined $starty;
	
	while (length ($text) > 0) {
		# If it starts with something that looks like tex...
		if ($text =~ s/^\$([^\$]*\$)//) {
			my $reverse_tex = reverse process_escaped_characters($1);
			# Set an italic font
			my $prev_font_style = $widget->font->style;
			$widget->font->style(fs::Italic);
			# Render and/or measure the tex
			my $dx = measure_or_draw_TeX($widget, $reverse_tex, '$', $startx, $starty);
			$length += $dx;
			if ($is_drawing) {
				$startx += cos($angle) * $dx;
				$starty += sin($angle) * $dx;
			}
			# Restore the font style
			$widget->font->style($prev_font_style);
		}
		# Pull off non-tex text
		$text =~ s/^([^\$]*)//;
		my $not_tex = $1;
		next if length($not_tex) == 0;
		my $dx = $widget->get_text_width($not_tex);
		if ($is_drawing) {
			$widget->text_out($not_tex, $startx, $starty);
			$startx += cos($angle) * $dx;
			$starty += sin($angle) * $dx;
		}
		$length += $dx;
	}
	
	# Always return the final width
	return $length;
}

# Assumes that the widget's font is already set up for this text, and
# that the tex string has been reversed, which means we can slowly eat
# characters off the end using chop. To determine if we are rendering or
# just measuring, check the definedness of starty. We chop directly off
# of the second argument, $_[1], so that our parser can "eat" characters
# that it has parsed.
sub old_measure_or_draw_TeX {
	my ($widget, undef, $end_char, $startx, $starty) = @_;
	my $is_drawing = defined $starty;
	my $length = 0;
	my $angle = $widget->font->direction * $deg_to_rad;
	
	# Ignore whitespace
	my $char = chop $_[1];
	$char = chop $_[1] while $char eq ' ';
	
	# If no end char given, then we check the first character to see if
	# it's an opening brace.
	if ($end_char eq '') {
		if ($char eq '{') {
			# Assign closing brace as our end char
			$end_char = '}';
			$char = chop $_[1];
		}
		else {
			# No two super/subscripts in a row
			if ($char eq '_' or $char eq '^') {
				my $original = reverse($_[1]);
				croak("Cannot have two superscripts or subscripts in a "
					."row (at $char$original)");
			}
			# render a single-character
			$widget->font->style(fs::Normal) if $not_italic{$char};
			$widget->text_out($char, $startx, $starty) if $is_drawing;
			my $dx = $widget->get_text_width($char);
			$widget->font->style(fs::Italic);
			return $dx;
		}
	}
	
	# Parse until we find the end char
	while (length($_[1]) > 0) {
		my $is_currently_italic = 1 - ($not_italic{$char} || 0);
		# Pull out stuff to render directly
		my $direct_render = '';
		while (length($_[1]) > 0 and $char !~ /[\^_\{$end_char]/) {
			my $char_is_italic = 1 - ($not_italic{$char} || 0);
			last if $char_is_italic != $is_currently_italic;
			$direct_render .= $char if $char ne ' ';
			$char = chop $_[1];
		}
		if (length($direct_render) > 0) {
			$widget->font->style(fs::Normal) unless $is_currently_italic;
			my $dx = $widget->get_text_width($direct_render);
			if ($is_drawing) {
				$widget->text_out($direct_render, $startx, $starty);
				$startx += cos($angle) * $dx;
				$starty += sin($angle) * $dx;
			}
			$widget->font->style(fs::Italic) unless $is_currently_italic;
			$length += $dx;
		}
		
		# What we do next depends on the character just popped off. If
		# we found the expected end character, we're done
		return $length if $char eq $end_char;
		
		# Handle superscripts and subscripts next
		my ($sub_length, $super_length);
		while ($char eq '^' or $char eq '_') {
			my $original_font_size = $widget->font->size;
			my $line_height = $widget->font->height;
			$widget->font->size($original_font_size * 2 / 3);
			if ($char eq '^') {
				if (defined $super_length) {
					my $original = reverse($_[1]);
					croak("Cannot have two superscripts or subscripts in a "
						."row (at $char$original)");
				}
				my ($x, $y);
				if ($is_drawing) {
					my $superscript_offset = 0.5 * $line_height;
					$x = $startx - sin($angle) * $superscript_offset;
					$y = $starty + $superscript_offset * cos($angle);
				}
				$super_length = measure_or_draw_TeX($widget, $_[1], '', $x, $y);
			}
			elsif ($char eq '_') {
				if (defined $sub_length) {
					my $original = reverse($_[1]);
					croak("Cannot have two superscripts or subscripts in a "
						."row (at $char$original)");
				}
				my ($x, $y);
				if ($is_drawing) {
					my $subscript_offset = -0.25 * $line_height;
					$x = $startx - sin($angle) * $subscript_offset;
					$y = $starty + $subscript_offset * cos($angle);
				}
				$sub_length = measure_or_draw_TeX($widget, $_[1], '', $x, $y);
			}
			$widget->font->size($original_font_size);
			# Eat whitespace
			$char = chop $_[1];
			$char = chop $_[1] while $char eq ' ';
		}
		# dx is the longer of the two distances
		$sub_length ||= 0;
		$super_length ||= 0;
		my $dx = $sub_length > $super_length ? $sub_length : $super_length;
		# Update the length and starting positions
		$length += $dx;
		if ($is_drawing) {
			$startx += cos($angle) * $dx;
			$starty += sin($angle) * $dx;
		}
	}
	return $length if $char eq $end_char;
	croak("Encountered unexpected end of tex string");
}

my %codepoint_for = (
	# Greek
	alpha => "\x{3B1}",
	beta => "\x{3B2}",
	Gamma => "\x{393}",
	gamma => "\x{3B3}",
	Delta => "\x{394}",
	delta => "\x{3B4}",
	epsilon => "\x{3B5}",
	zeta => "\x{3B6}",
	eta => "\x{3B7}",
	Theta => "\x{398}",
	theta => "\x{3B8}",
	vartheta => "\x{3D1}",
	iota => "\x{3B9}",
	kappa => "\x{3BA}",
	Lambda => "\x{39B}",
	lambda => "\x{3BB}",
	mu => "\x{3BC}",
	nu => "\x{3BD}",
	Xi => "\x{39E}",
	xi => "\x{3BE}",
	Pi => "\x{3A0}",
	pi => "\x{3C0}",
	rho => "\x{3C1}",
	Sigma => "\x{3A3}",
	sigma => "\x{3C3}",
	varsigma => "\x{3C2}",
	tau => "\x{3C4}",
	upsilon => "\x{3C5}",
	Phi => "\x{3A6}",
	phi => "\x{3D5}",
	varphi => "\x{3C6}",
	chi => "\x{3C7}",
	Psi => "\x{3A8}",
	psi => "\x{3C8}",
	Omega => "\x{3A9}",
	omega => "\x{3C9}",
	
	ell => "\x{2113}",
	times => "\N{MULTIPLICATION SIGN}",
	gt => '>',
	lt => '<',
	
);

sub process_escaped_characters {
	my $tex = shift;
	# Replaces common tex characters that have corresponding unicode
	# code points
	
	$tex =~ s{\\([a-zA-Z]+)}{ $codepoint_for{$1} || "\\$1" }eg;
	
	return $tex;
}

1;

=head1 NAME

PDL::Graphics::Prima::TeX - adding TeX rendering to your figures

=head1 NOTES

Prima comes with the F<fontdlg.pl> script in the F<examples> directory,
making it easy to explore the various font faces on a machine. On my
Linux machine, there appear to be four basic approaches that a font
uses for typesetting mathematics:

=over

=item No Typesetting

Many fonts only provide latin and greek letters. They might provide some
operators, but their coverage is far from complete. This happens with
surprising regularity for system fonts, which seem to focus on providing
wider support for arabic, hindi, etc. C<Bitstream Charter> is the worst,
failing to provide even greek letters. C<Century Schoolbook L> provides
cyrillic characters, but no greek ones. C<Arial> provides full coverage
of greek, at least.

=item Basic Unicode Support

Unicode codepoints exist for all latin and greek letters as well as the
important mathematics operators. This is the case for C<DroidSerif>

=item Wide Unicode Support

Unicode codepoints exist for all latin and greek letters, important
mathematics operators, and some "math typesetting" characters.
C<DejaVu Serif> falls into this category. For example, it does not
include fraktur settings of the latin alphabet.

=item Complete Unicode Support, not Prima accessible

A few font faces provide complete unicode coverage (described below) but
somehow provide bad data to Prima, so Prima has incorrect notions about
line height. This is the case for C<Latin Modern Math> and the "Math"
subfonts under C<TeX Gyre>. For example, C<TeX Gyre Schola> has a
corresponding C<TeX Gyre Schola Math>; Prima obtains correct font metrics
from the former but not the latter. I suspect that a work-around for the
"Math" subfonts could be devised in which the non-math font is queried
for information like internal leading.

=item Complete Unicode Support

All useful Unicode codepoints exist, including those typically associated
with changes in font syling, such as C<MATHEMATICAL SMALL ITALIC F>.
These include characters for script fonts, double-struck, fraktur,
san-serif, even monospace. C<FreeSerif> is one of the few that appears
to have complete coverage.

=item Multiple Fonts within a Family

Some collections of fonts restrict their tables to only contain a small
number (128?) of entries. Between various fonts in the family, they
provide coverage of all math symbols and font faces. The C<MathJax_...>
fonts are one such example; these use Unicode code-points for greek
symbols and mathematical operators, but provide double-struck, fraktur,
and other font faces using multiple fonts, and the ASCII codepoints. In
contrast, the C<...10> fonts such as C<cmex10>, C<cmmi10>, C<msbm10>,
etc, use a font-specific encoding that is not compatible with utf-8.

=back

Obviously, I have lots of possible approaches. The simples option is to
require the user to indicate a font with complete unicode support. In
fact, I could create an Alien package for FreeSerif and simply rely on
that package for TeX typesetting. For now, I will simply rely on full
unicode support (i.e. FreeSerif) and add other capabilities, such as
changing the font style, if I decide it's worth doing.

=cut
